//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Player/Input/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Touchs"",
            ""id"": ""5f72d734-e8f0-4252-b78e-d5074619d2b4"",
            ""actions"": [
                {
                    ""name"": ""Primary_Touch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""07fb1857-d674-47c8-9b69-749b04cd0264"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f6cd36fb-165d-48f1-b8a1-fba28953c8d5"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary_Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touchs
        m_Touchs = asset.FindActionMap("Touchs", throwIfNotFound: true);
        m_Touchs_Primary_Touch = m_Touchs.FindAction("Primary_Touch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touchs
    private readonly InputActionMap m_Touchs;
    private ITouchsActions m_TouchsActionsCallbackInterface;
    private readonly InputAction m_Touchs_Primary_Touch;
    public struct TouchsActions
    {
        private @PlayerInputs m_Wrapper;
        public TouchsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primary_Touch => m_Wrapper.m_Touchs_Primary_Touch;
        public InputActionMap Get() { return m_Wrapper.m_Touchs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchsActions set) { return set.Get(); }
        public void SetCallbacks(ITouchsActions instance)
        {
            if (m_Wrapper.m_TouchsActionsCallbackInterface != null)
            {
                @Primary_Touch.started -= m_Wrapper.m_TouchsActionsCallbackInterface.OnPrimary_Touch;
                @Primary_Touch.performed -= m_Wrapper.m_TouchsActionsCallbackInterface.OnPrimary_Touch;
                @Primary_Touch.canceled -= m_Wrapper.m_TouchsActionsCallbackInterface.OnPrimary_Touch;
            }
            m_Wrapper.m_TouchsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Primary_Touch.started += instance.OnPrimary_Touch;
                @Primary_Touch.performed += instance.OnPrimary_Touch;
                @Primary_Touch.canceled += instance.OnPrimary_Touch;
            }
        }
    }
    public TouchsActions @Touchs => new TouchsActions(this);
    public interface ITouchsActions
    {
        void OnPrimary_Touch(InputAction.CallbackContext context);
    }
}
